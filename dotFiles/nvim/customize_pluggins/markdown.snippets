priority -50

global !p
# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and x != '0'

endglobal

##############
## MYSNIPS ###
##############

snippet mk "Math$" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', '\'', ':', ';']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math$$" wA
$$ ${1} $$ $2
endsnippet

snippet <= "leq" iA
\le 
endsnippet

# priority 100
# snippet ** "cdot" iA
# \cdot 
# endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet matht "texttt" iA
\texttt{$1}$0
endsnippet

# context "math()"
# snippet case "cases" wA
# \begin{cases}
#   $1
# \end{cases}
# endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet "(?<!\\)gamma" "\gamma" riA
\gamma
endsnippet

context "math()"
snippet "(?<!\\)theta" "\theta" riA
\theta
endsnippet

context "math()"
snippet "(?<!\\)epsi" "\eps" riA
\epsilon
endsnippet

context "math()"
snippet "(?<!\\)phi" "\phi" riA
\phi
endsnippet

snippet qq "quote" wA
\`\`${1}" $2
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet invs "^{-1}" iA
^{-1}
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet dd "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])([0-9])' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_([0-9][0-9])' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

# snippet beg "begin{} / end{}" bA
# \begin{$1}
#   $0
# \end{$1}
# endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet root "sqrt" iA
\sqrt{$1}$0
endsnippet


# more auto fraction
# context "math()"
# snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
# \\frac{`!p snip.rv = match.group(1)`}{$1}$0
# endsnippet

# this does automatic fraction; I don't really like it tbh
# priority 1000
# snippet '^.*\)/' "() Fraction" wrA
# `!p
# stripped = match.string[:-1]
# depth = 0
# i = len(stripped) - 1
# while True:
#   if stripped[i] == ')': depth += 1
#   if stripped[i] == '(': depth -= 1
#   if depth == 0: break;
#   i -= 1
# snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
# `{$1}$0
# endsnippet



###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet ** "bold"
**${1:${VISUAL}}**$0
endsnippet

snippet *** "bold italics"
***${1:${VISUAL}}***$0
endsnippet

snippet /* "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:https://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`${1:${VISUAL}}\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`$1
${2:${VISUAL}}
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:https://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet detail "Disclosure"
<details${3: open=""}>
  ${1:<summary>${2}</summary>}$0
</details>
endsnippet

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv = match.group(1)`
endsnippet


snippet prop "Proposition" bi
beg prop
${0:${VISUAL}}
end prop
endsnippet

snippet thm "Theorem" bi
beg thm
${0:${VISUAL}}
end thm
endsnippet

snippet pf "Proof" bi
beg pf
${0:${VISUAL}}
end pf
endsnippet

snippet def "Definition" bi
beg defn
${0:${VISUAL}}
end defn
endsnippet

snippet example "Example" bi
beg ex
${0:${VISUAL}}
end ex
endsnippet

snippet rmk "Remark" bi
beg rmk
${0:${VISUAL}}
end rmk
endsnippet

snippet cor "Cor" bi
beg cor
${0:${VISUAL}}
end cor
endsnippet

snippet lem "Lemma" bi
beg lem
${0:${VISUAL}}
end lem
endsnippet


# vim:ft=snippets:
